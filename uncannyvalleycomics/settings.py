"""
Django settings for uncannyvalleycomics project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from dotenv import load_dotenv
from pathlib import Path

load_dotenv()

import cloudinary
import cloudinary.uploader
import cloudinary.api
import logging


from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "fallback-secret-key")
FRONTEND_URL = os.environ.get("FRONTEND_URL", "http://127.0.0.1:5173")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False") == "True"

ALLOWED_HOSTS = ["127.0.0.1", "localhost", ".onrender.com","uncanny-valley-comics-backend.onrender.com"]


# Application definition

INSTALLED_APPS = [
  # Third-party apps
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    "django_extensions",

    "rest_framework",
    "rest_framework.authtoken",
    "django_filters",
    "corsheaders",
    "users",
    "products",
    "orders",
     "accounts",
     "analytics",
    "events",
    'cloudinary',
    'cloudinary_storage',
     'django.contrib.sites',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]



MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # â¬† must come first
    "corsheaders.middleware.CorsMiddleware",          # â¬† must come right after security
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "analytics.middleware.VisitorTrackingMiddleware",
    'users.middleware.AssignGuestIdMiddleware',

]




AUTH_USER_MODEL = "users.User"

REST_FRAMEWORK = {
  "DEFAULT_AUTHENTICATION_CLASSES": (
      "rest_framework.authentication.SessionAuthentication",   # ðŸ‘ˆ Enables login sessions
      "rest_framework_simplejwt.authentication.JWTAuthentication",  # ðŸ‘ˆ Optional, if you also use tokens
  ),
  "DEFAULT_PERMISSION_CLASSES": (
      "rest_framework.permissions.IsAuthenticatedOrReadOnly",
  ),
  "DEFAULT_FILTER_BACKENDS": (
      "django_filters.rest_framework.DjangoFilterBackend",
      "rest_framework.filters.SearchFilter",
      "rest_framework.filters.OrderingFilter",
  ),
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=7),     # default is 5 minutes
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
}

cloudinary.config(
    cloud_name=os.getenv('CLOUDINARY_NAME'),
    api_key=os.getenv('CLOUDINARY_API_KEY'),
    api_secret=os.getenv('CLOUDINARY_API_SECRET'),
    secure=True
)

CLOUDINARY_CLOUD_NAME = os.getenv('CLOUDINARY_NAME')


DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
STATICFILES_STORAGE = 'cloudinary_storage.storage.StaticHashedCloudinaryStorage'


ROOT_URLCONF = 'uncannyvalleycomics.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'uncannyvalleycomics.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}

REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "accounts.serializers.CustomRegisterSerializer",
}

REST_AUTH_SERIALIZERS = {
    "USER_DETAILS_SERIALIZER": "accounts.serializers.CustomUserDetailsSerializer",
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True





# logging.basicConfig(
#     level=logging.DEBUG,
#     format='%(asctime)s [%(levelname)s] %(message)s',
# )

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


SITE_ID = 1

SOCIALACCOUNT_QUERY_EMAIL = True
# GOOGLE LOGIN
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['email', 'profile'],
        'AUTH_PARAMS': {'access_type': 'offline'},
        'APP': {
            'client_id': os.getenv('GOOGLE_CLIENT_ID'),
            'secret': os.getenv('GOOGLE_CLIENT_SECRET'),
            'key': ''
        }
    }
}

ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_UNIQUE_EMAIL = True

# This allows automatic linking *only if the email is verified by the provider*
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_STORE_TOKENS = True

# Optional â€” skip signup form, but check email match
SOCIALACCOUNT_ADAPTER = "users.adapters.SafeSocialAccountAdapter"
# SOCIALACCOUNT_ADAPTER = "users.debug_adapter.DebugSocialAccountAdapter"



# users can log in with email or username (username is auto-filled)
ACCOUNT_LOGIN_METHODS = {"email", "username"}

# signup fields shown (no username field)
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]

# Email backend
# EMAIL CONFIGURATION
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.zoho.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 465))
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'True') == 'True'
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'False') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('EMAIL_HOST_USER')

# Ensure users canâ€™t log in until verified
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

EMAIL_FAIL_SILENTLY = False

# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = 'http://localhost:3000/email-confirmed' #Change to your front end site
# ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = 'http://localhost:3000/email-confirmed'#Change to your front end site

# ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
# ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_REDIRECT_URL = 'http://localhost:3000/verification-expired' #Change to your front end site


# LOGIN_REDIRECT_URL = f"{FRONTEND_URL}/"
# LOGOUT_REDIRECT_URL = f"{FRONTEND_URL}/"
# ACCOUNT_LOGOUT_REDIRECT_URL = f"{FRONTEND_URL}/"

FRONTEND_URL = os.getenv('FRONTEND_URL')
LOGIN_REDIRECT_URL = FRONTEND_URL
LOGOUT_REDIRECT_URL = FRONTEND_URL
ACCOUNT_LOGOUT_REDIRECT_URL = FRONTEND_URL
ACCOUNT_SIGNUP_REDIRECT_URL = FRONTEND_URL

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    "loggers": {
        "allauth": {"handlers": ["console"], "level": "DEBUG"},
        "django": {"handlers": ["console"], "level": "INFO"},
        "django.request": {"handlers": ["console"], "level": "DEBUG"},
    },
}

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # default
    "allauth.account.auth_backends.AuthenticationBackend",  # allauth
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "https://uncanny-valley-comics-backend.onrender.com",
    "https://uncannyvalleycomics.netlify.app",

]

CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "https://uncanny-valley-comics-backend.onrender.com",
    "https://uncannyvalleycomics.netlify.app",
]

# SESSION_COOKIE_SAMESITE = "None"
# CSRF_COOKIE_SAMESITE = "None"

# SESSION_COOKIE_SECURE =  os.getenv('SESSION_COOKIE_SECURE')
# CSRF_COOKIE_SECURE =  os.getenv('CSRF_COOKIE_SECURE')

CSRF_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SAMESITE = "None"
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True




logging.getLogger("allauth").setLevel("DEBUG")
logging.getLogger("allauth").addHandler(logging.StreamHandler())


STATIC_ROOT = BASE_DIR / "staticfiles"



